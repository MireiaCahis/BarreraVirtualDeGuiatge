def barreraVirtualGuiatgePROVAsetTCP():
  global _hidden_verificationVariable=0
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.13501,0.0,0.0,0.0])
  set_target_payload(0.820000, [0.001000, -0.004000, 0.047000], [0.001106, 0.001106, 0.001106, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  global Pallet_1_cnt_1=21
  global Pallet_1_cnt=7
  global Plane_1=p[0.0,-0.4,0.3,1.5707963267948972,2.8855060405826856E-16,-2.885506040582686E-16]
  step_count_21a171f8_186e_4d2c_acbe_45a902ca3c9a = 0.0
  thread Step_Counter_Thread_b25763c0_9da4_4999_86c1_d32637677ddc():
    while (True):
      step_count_21a171f8_186e_4d2c_acbe_45a902ca3c9a = step_count_21a171f8_186e_4d2c_acbe_45a902ca3c9a + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_b25763c0_9da4_4999_86c1_d32637677ddc()
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  def rectificarPosicio():
    $ 68 "rectificarPosicio" "noBreak"
    $ 69 "'Aquest subprograma realitza el moviment lineal en una direccio.'"
    # 'Aquest subprograma realitza el moviment lineal en una direccio.'
    $ 70 "'Generem una variable centre amb els mateixos valors de x, y i z, pero amb els graus dels joints iguals que els de l'eina.'"
    # 'Generem una variable centre amb els mateixos valors de x, y i z, pero amb els graus dels joints iguals que els de l'eina.'
    $ 71 "centre2≔p[centre[0],centre[1],posAct[2],posAct[3],posAct[4],posAct[5]]"
    global centre2=p[centre[0],centre[1],posAct[2],posAct[3],posAct[4],posAct[5]]
    $ 72 "'Calculem el vector director per anar del punt actual de l'eina fins al centre.'"
    # 'Calculem el vector director per anar del punt actual de l'eina fins al centre.'
    $ 73 "vectorDir2≔[centre2[0]-posAct[0],centre2[1]-posAct[1],centre2[2]-posAct[2]]"
    global vectorDir2=[centre2[0]-posAct[0],centre2[1]-posAct[1],centre2[2]-posAct[2]]
    $ 74 "'Donem marge de temps per pensar al software.'"
    # 'Donem marge de temps per pensar al software.'
    $ 75 "Wait: 0.01"
    sleep(0.01)
    $ 76 "'Ens movem en direcció el centre fins que hagi recorregut una certa distancia'"
    # 'Ens movem en direcció el centre fins que hagi recorregut una certa distancia'
    $ 77 "MoveL"
    $ 78 "Direction: Base"
    global move_thread_flag_78=0
    thread move_thread_78():
      enter_critical
      move_thread_flag_78 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], vectorDir2, 0.001)
      movel(towardsPos, a=0.05, v=0.02)
      move_thread_flag_78 = 2
      exit_critical
    end
    move_thread_flag_78 = 0
    move_thread_han_78 = run move_thread_78()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_78 > 1):
        join move_thread_han_78
        $ 79 "Until (distance)"
        break
      end
      sync()
    end
    $ 80 "'Tornem a activar el moviment.'"
    # 'Tornem a activar el moviment.'
    $ 81 "freedrive_mode()"
    freedrive_mode()
  end
  $ 82 "Thread_1"
  thread Thread_1():
    while (True):
      $ 83 "Set"
      set_tcp(p[-0.071,-0.14801,0.1176,0.0,0.0,0.0])
      $ 84 "Set Payload: Payload_TCPEina 0.0s"
      set_target_payload(0.820000, [0.004000, -0.009000, 0.048000], [0.001106, 0.001106, 0.001106, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 85 "llistaTCPactual≔get_actual_tcp_pose()"
      global llistaTCPactual= get_actual_tcp_pose ()
      $ 86 "Set"
      set_tcp(p[-0.07237805867785846,0.03487823235901087,0.11496915990614842,0.0,0.0,0.0])
      $ 87 "Set Payload: Payload_CapEina 0.0s"
      set_target_payload(0.840000, [-0.003000, -0.016000, 0.041000], [0.001151, 0.001151, 0.001151, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 88 "llistaFlangeAct≔get_actual_tcp_pose()"
      global llistaFlangeAct= get_actual_tcp_pose ()
      $ 89 "llistaMigAct≔p[(llistaTCPactual[0]+llistaFlangeAct[0])/2,(llistaTCPactual[1]+llistaFlangeAct[1])/2,(llistaTCPactual[2]+llistaFlangeAct[2])/2,llistaTCPactual[3],llistaTCPactual[4],llistaTCPactual[5]]"
      global llistaMigAct=p[(llistaTCPactual[0]+llistaFlangeAct[0])/2,(llistaTCPactual[1]+llistaFlangeAct[1])/2,(llistaTCPactual[2]+llistaFlangeAct[2])/2,llistaTCPactual[3],llistaTCPactual[4],llistaTCPactual[5]]
      $ 90 "'Amb IFs pq el thread es un bucle pq te indicat loops forever'"
      # 'Amb IFs pq el thread es un bucle pq te indicat loops forever'
      $ 91 "'Mirem el TCP'"
      # 'Mirem el TCP'
      $ 92 "If (llistaTCPactual[2]-centre[2])≤alturaCon and (llistaTCPactual[2]-centre[2])>0"
      if ((llistaTCPactual[2]-centre[2]) <= alturaCon  and  (llistaTCPactual[2]-centre[2])>0):
        $ 93 "r≔R-(alturaCon-(llistaTCPactual[2]-centre[2]))-rTCP"
        global r=R-(alturaCon-(llistaTCPactual[2]-centre[2]))-rTCP
        $ 94 "'Calculem la distancia entre dos punts, el centre i el tcp al pla X-Y'"
        # 'Calculem la distancia entre dos punts, el centre i el tcp al pla X-Y'
        $ 95 "distPunts≔sqrt(pow(llistaTCPactual[0]-centre[0],2)+pow(llistaTCPactual[1]-centre[1],2))"
        global distPunts=sqrt(pow(llistaTCPactual[0]-centre[0],2)+pow(llistaTCPactual[1]-centre[1],2))
        $ 96 "'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'"
        # 'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'
        $ 97 "If distPunts≥r or distPunts≤-r"
        global thread_flag_97=0
        thread Thread_if_97():
          $ 98 "surtTcpCon≔ True "
          global surtTcpCon=  True  
          thread_flag_97 = 1
        end
        if (distPunts >= r  or  distPunts <= -r):
          global thread_handler_97=run Thread_if_97()
          while (thread_flag_97 == 0):
            if not(distPunts >= r  or  distPunts <= -r):
              kill thread_handler_97
              thread_flag_97 = 2
            else:
              sync()
            end
          end
        else:
          thread_flag_97 = 2
        end
      else:
        $ 99 "ElseIf (llistaTCPactual[2]-centre[2])≤0 and (llistaTCPactual[2]-centre[2])≥-(alturaCilindre)"
        if ((llistaTCPactual[2]-centre[2]) <= 0  and  (llistaTCPactual[2]-centre[2]) >= -(alturaCilindre)):
          $ 100 "r≔R-alturaCon-rTCP"
          global r=R-alturaCon-rTCP
          $ 101 "'Calculem la distancia entre dos punts, el centre i el tcp al pla X-Y'"
          # 'Calculem la distancia entre dos punts, el centre i el tcp al pla X-Y'
          $ 102 "distPunts≔sqrt(pow(llistaTCPactual[0]-centre[0],2)+pow(llistaTCPactual[1]-centre[1],2))"
          global distPunts=sqrt(pow(llistaTCPactual[0]-centre[0],2)+pow(llistaTCPactual[1]-centre[1],2))
          $ 103 "'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'"
          # 'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'
          $ 104 "If distPunts≥r or distPunts≤-r"
          global thread_flag_104=0
          thread Thread_if_104():
            $ 105 "surtTcpCilindre≔ True "
            global surtTcpCilindre=  True  
            thread_flag_104 = 1
          end
          if (distPunts >= r  or  distPunts <= -r):
            global thread_handler_104=run Thread_if_104()
            while (thread_flag_104 == 0):
              if not(distPunts >= r  or  distPunts <= -r):
                kill thread_handler_104
                thread_flag_104 = 2
              else:
                sync()
              end
            end
          else:
            thread_flag_104 = 2
          end
        end
      end
      $ 106 "'Mirem la part superior de l'eina.'"
      # 'Mirem la part superior de l'eina.'
      $ 107 "If (llistaFlangeAct[2]-centre[2])≤alturaCon and (llistaFlangeAct[2]-centre[2])>0"
      if ((llistaFlangeAct[2]-centre[2]) <= alturaCon  and  (llistaFlangeAct[2]-centre[2])>0):
        $ 108 "rf≔R-(alturaCon-(llistaFlangeAct[2]-centre[2]))-rFlange"
        global rf=R-(alturaCon-(llistaFlangeAct[2]-centre[2]))-rFlange
        $ 109 "'Calculem la distancia entre dos punts, el centre i la part superior de l'eina al pla X-Y'"
        # 'Calculem la distancia entre dos punts, el centre i la part superior de l'eina al pla X-Y'
        $ 110 "distPuntFlange≔sqrt(pow(llistaFlangeAct[0]-centre[0],2)+pow(llistaFlangeAct[1]-centre[1],2))"
        global distPuntFlange=sqrt(pow(llistaFlangeAct[0]-centre[0],2)+pow(llistaFlangeAct[1]-centre[1],2))
        $ 111 "'Si la distancia calculada supera el valor rf, entrem a la condicio perque estem intentant superar el limit.'"
        # 'Si la distancia calculada supera el valor rf, entrem a la condicio perque estem intentant superar el limit.'
        $ 112 "If distPuntFlange≥rf or distPuntFlange≤-rf"
        global thread_flag_112=0
        thread Thread_if_112():
          $ 113 "surtFlangeCon≔ True "
          global surtFlangeCon=  True  
          thread_flag_112 = 1
        end
        if (distPuntFlange >= rf  or  distPuntFlange <= -rf):
          global thread_handler_112=run Thread_if_112()
          while (thread_flag_112 == 0):
            if not(distPuntFlange >= rf  or  distPuntFlange <= -rf):
              kill thread_handler_112
              thread_flag_112 = 2
            else:
              sync()
            end
          end
        else:
          thread_flag_112 = 2
        end
      else:
        $ 114 "ElseIf (llistaFlangeAct[2]-centre[2])≤0 and (llistaFlangeAct[2]-centre[2])≥-(alturaCilindre)"
        if ((llistaFlangeAct[2]-centre[2]) <= 0  and  (llistaFlangeAct[2]-centre[2]) >= -(alturaCilindre)):
          $ 115 "rf≔R-alturaCon-rFlange"
          global rf=R-alturaCon-rFlange
          $ 116 "'Calculem la distancia entre dos punts, el centre i el Flange al pla X-Y'"
          # 'Calculem la distancia entre dos punts, el centre i el Flange al pla X-Y'
          $ 117 "distPuntFlange≔sqrt(pow(llistaFlangeAct[0]-centre[0],2)+pow(llistaFlangeAct[1]-centre[1],2))"
          global distPuntFlange=sqrt(pow(llistaFlangeAct[0]-centre[0],2)+pow(llistaFlangeAct[1]-centre[1],2))
          $ 118 "'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'"
          # 'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'
          $ 119 "If distPuntFlange≥rf or distPuntFlange≤-rf"
          global thread_flag_119=0
          thread Thread_if_119():
            $ 120 "surtFlangeCilin≔ True "
            global surtFlangeCilin=  True  
            thread_flag_119 = 1
          end
          if (distPuntFlange >= rf  or  distPuntFlange <= -rf):
            global thread_handler_119=run Thread_if_119()
            while (thread_flag_119 == 0):
              if not(distPuntFlange >= rf  or  distPuntFlange <= -rf):
                kill thread_handler_119
                thread_flag_119 = 2
              else:
                sync()
              end
            end
          else:
            thread_flag_119 = 2
          end
        end
      end
      $ 121 "'Mirem el punt del mig'"
      # 'Mirem el punt del mig'
      $ 122 "If (llistaMigAct[2]-centre[2])≤alturaCon and (llistaMigAct[2]-centre[2])>0"
      if ((llistaMigAct[2]-centre[2]) <= alturaCon  and  (llistaMigAct[2]-centre[2])>0):
        $ 123 "rm≔R-(alturaCon-(llistaMigAct[2]-centre[2]))-rMig"
        global rm=R-(alturaCon-(llistaMigAct[2]-centre[2]))-rMig
        $ 124 "'Calculem la distancia entre dos punts, el centre i el mig al pla X-Y'"
        # 'Calculem la distancia entre dos punts, el centre i el mig al pla X-Y'
        $ 125 "distPuntMig≔sqrt(pow(llistaMigAct[0]-centre[0],2)+pow(llistaMigAct[1]-centre[1],2))"
        global distPuntMig=sqrt(pow(llistaMigAct[0]-centre[0],2)+pow(llistaMigAct[1]-centre[1],2))
        $ 126 "'Si la distancia calculada supera el valor rf, entrem a la condicio perque estem intentant superar el limit.'"
        # 'Si la distancia calculada supera el valor rf, entrem a la condicio perque estem intentant superar el limit.'
        $ 127 "If distPuntMig≥rm or distPuntMig≤-rm"
        global thread_flag_127=0
        thread Thread_if_127():
          $ 128 "surtMigCon≔ True "
          global surtMigCon=  True  
          thread_flag_127 = 1
        end
        if (distPuntMig >= rm  or  distPuntMig <= -rm):
          global thread_handler_127=run Thread_if_127()
          while (thread_flag_127 == 0):
            if not(distPuntMig >= rm  or  distPuntMig <= -rm):
              kill thread_handler_127
              thread_flag_127 = 2
            else:
              sync()
            end
          end
        else:
          thread_flag_127 = 2
        end
      else:
        $ 129 "ElseIf (llistaMigAct[2]-centre[2])≤0 and (llistaMigAct[2]-centre[2])≥-(alturaCilindre)"
        if ((llistaMigAct[2]-centre[2]) <= 0  and  (llistaMigAct[2]-centre[2]) >= -(alturaCilindre)):
          $ 130 "rm≔R-alturaCon-rMig"
          global rm=R-alturaCon-rMig
          $ 131 "'Calculem la distancia entre dos punts, el centre i el mig al pla X-Y'"
          # 'Calculem la distancia entre dos punts, el centre i el mig al pla X-Y'
          $ 132 "distPuntMig≔sqrt(pow(llistaMigAct[0]-centre[0],2)+pow(llistaMigAct[1]-centre[1],2))"
          global distPuntMig=sqrt(pow(llistaMigAct[0]-centre[0],2)+pow(llistaMigAct[1]-centre[1],2))
          $ 133 "'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'"
          # 'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'
          $ 134 "If distPuntMig≥rm or distPuntMig≤-rm"
          global thread_flag_134=0
          thread Thread_if_134():
            $ 135 "surtMigCilin≔ True "
            global surtMigCilin=  True  
            thread_flag_134 = 1
          end
          if (distPuntMig >= rm  or  distPuntMig <= -rm):
            global thread_handler_134=run Thread_if_134()
            while (thread_flag_134 == 0):
              if not(distPuntMig >= rm  or  distPuntMig <= -rm):
                kill thread_handler_134
                thread_flag_134 = 2
              else:
                sync()
              end
            end
          else:
            thread_flag_134 = 2
          end
        end
      end
      $ 136 "Wait: 0.01"
      sleep(0.01)
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 2 "Robot Program"
  $ 3 "'Inicialitzem els variables que ens permeten saber si sortim de les barreres virtuals (con o cilindre).'"
  # 'Inicialitzem els variables que ens permeten saber si sortim de les barreres virtuals (con o cilindre).'
  $ 4 "surtTcpCon≔ False "
  global surtTcpCon=  False  
  $ 5 "surtTcpCilindre≔ False "
  global surtTcpCilindre=  False  
  $ 6 "surtFlangeCon≔ False "
  global surtFlangeCon=  False  
  $ 7 "surtFlangeCilin≔ False "
  global surtFlangeCilin=  False  
  $ 8 "surtMigCon≔ False "
  global surtMigCon=  False  
  $ 9 "surtMigCilin≔ False "
  global surtMigCilin=  False  
  $ 10 "'Indiquem les coordenades d'un punt central pel con i el cilindre.'"
  # 'Indiquem les coordenades d'un punt central pel con i el cilindre.'
  $ 11 "centre≔p[-0.018,-0.376,0.226,0,0,0]"
  global centre=p[-0.018,-0.376,0.226,0,0,0]
  $ 12 "'Inicialitzem la variable del radi de l'esfera del TCP, el cap de l'eina i el punt entremig.'"
  # 'Inicialitzem la variable del radi de l'esfera del TCP, el cap de l'eina i el punt entremig.'
  $ 13 "rTCP≔0.05"
  global rTCP=0.05
  $ 14 "rFlange≔0.06"
  global rFlange=0.06
  $ 15 "rMig≔0.05"
  global rMig=0.05
  $ 16 "'Indiquem la variable de radi i l'altura que volem al con.'"
  # 'Indiquem la variable de radi i l'altura que volem al con.'
  $ 17 "'R>alturaCon'"
  # 'R>alturaCon'
  $ 18 "R≔0.25"
  global R=0.25
  $ 19 "alturaCon≔0.15"
  global alturaCon=0.15
  $ 20 "'Definim l'altura del cilindre. El seu radi depend de l'alturaCon i R.'"
  # 'Definim l'altura del cilindre. El seu radi depend de l'alturaCon i R.'
  $ 21 "alturaCilindre≔0.15"
  global alturaCilindre=0.15
  $ 22 "'Activem el moviment lliure.'"
  # 'Activem el moviment lliure.'
  $ 23 "freedrive_mode()"
  freedrive_mode()
  $ 24 "Loop"
  while (True):
    $ 25 "If surtTcpCon≟ True  or surtTcpCilindre≟ True "
    if (surtTcpCon ==   True    or  surtTcpCilindre ==   True  ):
      $ 26 "'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'"
      # 'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'
      $ 27 "end_freedrive_mode()"
      end_freedrive_mode()
      $ 28 "'Obtenim la posició del TCP per mantenir els graus dels joints.'"
      # 'Obtenim la posició del TCP per mantenir els graus dels joints.'
      $ 29 "Set"
      set_tcp(p[-0.071,-0.14801,0.1176,0.0,0.0,0.0])
      $ 30 "Set Payload: Payload_TCPEina 0.0s"
      set_target_payload(0.820000, [0.004000, -0.009000, 0.048000], [0.001106, 0.001106, 0.001106, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 31 "posAct≔get_actual_tcp_pose()"
      global posAct= get_actual_tcp_pose ()
      $ 32 "'Cridem el subprograma que rectifica la posicio de l'eina.'"
      # 'Cridem el subprograma que rectifica la posicio de l'eina.'
      $ 33 "Call rectificarPosicio"
      rectificarPosicio()
      $ 34 "'Ara ja tornem a estar a dins l'area de moviment permesa, surtTcpCon i surtTcpCilindre a False.'"
      # 'Ara ja tornem a estar a dins l'area de moviment permesa, surtTcpCon i surtTcpCilindre a False.'
      $ 35 "surtTcpCon≔ False "
      global surtTcpCon=  False  
      $ 36 "surtTcpCilindre≔ False "
      global surtTcpCilindre=  False  
    end
    $ 37 "'Ara per la part superior de l'eina.'"
    # 'Ara per la part superior de l'eina.'
    $ 38 "If surtFlangeCon≟ True  or surtFlangeCilin≟ True "
    if (surtFlangeCon ==   True    or  surtFlangeCilin ==   True  ):
      $ 39 "'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'"
      # 'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'
      $ 40 "end_freedrive_mode()"
      end_freedrive_mode()
      $ 41 "'Obtenim la posició del cap de l'eina per mantenir els graus dels joints.'"
      # 'Obtenim la posició del cap de l'eina per mantenir els graus dels joints.'
      $ 42 "Set"
      set_tcp(p[-0.07237805867785846,0.03487823235901087,0.11496915990614842,0.0,0.0,0.0])
      $ 43 "Set Payload: Payload_CapEina 0.0s"
      set_target_payload(0.840000, [-0.003000, -0.016000, 0.041000], [0.001151, 0.001151, 0.001151, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 44 "posAct≔get_actual_tcp_pose()"
      global posAct= get_actual_tcp_pose ()
      $ 45 "'Cridem el subprograma que rectifica la posicio de l'eina.'"
      # 'Cridem el subprograma que rectifica la posicio de l'eina.'
      $ 46 "Call rectificarPosicio"
      rectificarPosicio()
      $ 47 "'Ara ja tornem a estar a dins l'area de moviment permesa, surtFlangeCon i surtFlangeCilin a False.'"
      # 'Ara ja tornem a estar a dins l'area de moviment permesa, surtFlangeCon i surtFlangeCilin a False.'
      $ 48 "surtFlangeCon≔ False "
      global surtFlangeCon=  False  
      $ 49 "surtFlangeCilin≔ False "
      global surtFlangeCilin=  False  
    end
    $ 50 "'Ara pel punt del mig.'"
    # 'Ara pel punt del mig.'
    $ 51 "If surtMigCon≟ True  or surtMigCilin≟ True "
    if (surtMigCon ==   True    or  surtMigCilin ==   True  ):
      $ 52 "'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'"
      # 'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'
      $ 53 "end_freedrive_mode()"
      end_freedrive_mode()
      $ 54 "'Obtenim la posició del mig per mantenir els graus dels joints.'"
      # 'Obtenim la posició del mig per mantenir els graus dels joints.'
      $ 55 "Set"
      set_tcp(p[-0.071,-0.14801,0.1176,0.0,0.0,0.0])
      $ 56 "Set Payload: Payload_TCPEina 0.0s"
      set_target_payload(0.820000, [0.004000, -0.009000, 0.048000], [0.001106, 0.001106, 0.001106, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 57 "tcpActual≔get_actual_tcp_pose()"
      global tcpActual= get_actual_tcp_pose ()
      $ 58 "Set"
      set_tcp(p[-0.07237805867785846,0.03487823235901087,0.11496915990614842,0.0,0.0,0.0])
      $ 59 "Set Payload: Payload_CapEina 0.0s"
      set_target_payload(0.840000, [-0.003000, -0.016000, 0.041000], [0.001151, 0.001151, 0.001151, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 60 "flangeAct≔get_actual_tcp_pose()"
      global flangeAct= get_actual_tcp_pose ()
      $ 61 "posAct≔p[(tcpActual[0]+flangeAct[0])/2,(tcpActual[1]+flangeAct[1])/2,(tcpActual[2]+flangeAct[2])/2,tcpActual[3],tcpActual[4],tcpActual[5]]"
      global posAct=p[(tcpActual[0]+flangeAct[0])/2,(tcpActual[1]+flangeAct[1])/2,(tcpActual[2]+flangeAct[2])/2,tcpActual[3],tcpActual[4],tcpActual[5]]
      $ 62 "'Cridem el subprograma que rectifica la posicio de l'eina.'"
      # 'Cridem el subprograma que rectifica la posicio de l'eina.'
      $ 63 "Call rectificarPosicio"
      rectificarPosicio()
      $ 64 "'Ara ja tornem a estar a dins l'area de moviment permesa, surtFlangeCon i surtFlangeCilin a False.'"
      # 'Ara ja tornem a estar a dins l'area de moviment permesa, surtFlangeCon i surtFlangeCilin a False.'
      $ 65 "surtMigCon≔ False "
      global surtMigCon=  False  
      $ 66 "surtMigCilin≔ False "
      global surtMigCilin=  False  
    end
    $ 67 "Wait: 0.01"
    sleep(0.01)
  end
end
