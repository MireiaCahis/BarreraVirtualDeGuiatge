 Program
   Init Variables
   Robot Program
     'Inicialitzem els variables que ens permeten saber si sortim de les barreres virtuals (con o cilindre).'
     surtTcpCon≔ False 
     surtTcpCilindre≔ False 
     surtFlangeCon≔ False 
     surtFlangeCilin≔ False 
     surtMigCon≔ False 
     surtMigCilin≔ False 
     'Indiquem les coordenades d'un punt central pel con i el cilindre.'
     centre≔p[-0.018,-0.376,0.226,0,0,0]
     'Inicialitzem la variable del radi de l'esfera del TCP, el Flange i el punt entremig.'
     rTCP≔0.05
     rFlange≔0.06
     rMig≔0.05
     'Indiquem la variable de radi i l'altura que volem al con.'
     'R>alturaCon'
     R≔0.25
     alturaCon≔0.15
     'Definim l'altura del cilindre. El seu radi depend de l'alturaCon i R.'
     alturaCilindre≔0.15
     'Definim la variable amb el valor que volem que retrocedeixi en el cilindre.'
     retrocedir≔0.005
     'Activem el moviment lliure.'
     freedrive_mode()
     Loop
       If surtTcpCon≟ True  or surtTcpCilindre≟ True 
         'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'
         end_freedrive_mode()
         'Obtenim la posició del TCP per mantenir els graus dels joints.'
         tcpActual≔get_actual_tcp_pose()
         'Generem una variable centre amb els mateixos valors de x, y i z, pero amb els graus dels joints iguals que els de l'eina.'
         centre2≔p[centre[0],centre[1],tcpActual[2],tcpActual[3],tcpActual[4],tcpActual[5]]
         'Calculem el radi que hem de tenir en compte.'
         If surtTcpCon≟ True 
           'Calculem el radi pel con.'
           r≔R-(alturaCon-(tcpActual[2]-centre[2]))-rTCP
         If surtTcpCilindre≟ True 
           'Calculem el radi pel cilindre.'
           r≔R-alturaCon-retrocedir-rTCP
         'Ens movem en direcció el centre fins que la distancia entre el centre i el tcp sigui més petit o igual a la del radi - 1mm'
         MoveL
           centre2
             Until (expression)
         'Tornem a activar el moviment.'
         freedrive_mode()
         'Ara ja tornem a estar a dins l'area de moviment permesa, surtTcpCon i surtTcpCilindre a False.'
         surtTcpCon≔ False 
         surtTcpCilindre≔ False 
       'Ara pel Flange'
       If surtFlangeCon≟ True  or surtFlangeCilin≟ True 
         'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'
         end_freedrive_mode()
         'Obtenim la posició del Flange per mantenir els graus dels joints.'
         flangeAct≔get_actual_tool_flange_pose()
         'Generem una variable centre amb els mateixos valors de x, y i z, pero amb els graus dels joints iguals que els de la brida.'
         centre3≔p[centre[0],centre[1],flangeAct[2],flangeAct[3],flangeAct[4],flangeAct[5]]
         'Ens movem en direcció el centre fins que hagi recorregut una certa distancia'
         vectorDir≔[centre3[0]-flangeAct[0],centre3[1]-flangeAct[1],centre3[2]-flangeAct[2]]
         MoveL
           Direction: Base
             Until (distance)
         'Tornem a activar el moviment.'
         freedrive_mode()
         'Ara ja tornem a estar a dins l'area de moviment permesa, surtFlangeCon i surtFlangeCilin a False.'
         surtFlangeCon≔ False 
         surtFlangeCilin≔ False 
       'Ara pel del mig'
       If surtMigCon≟ True  or surtMigCilin≟ True 
         'La condicio es compleix, estem intentant superar la barrera virtual. Parem el moviment lliure.'
         end_freedrive_mode()
         'Obtenim la posició del mig per mantenir els graus dels joints.'
         tcpActual≔get_actual_tcp_pose()
         flangeAct≔get_actual_tool_flange_pose()
         migAct≔p[(tcpActual[0]+flangeAct[0])/2,(tcpActual[1]+flangeAct[1])/2,(tcpActual[2]+flangeAct[2])/2,tcpActual[3],tcpActual[4],tcpActual[5]]
         'Generem una variable centre amb els mateixos valors de x, y i z, pero amb els graus dels joints iguals que els de la brida.'
         centre4≔p[centre[0],centre[1],migAct[2],migAct[3],migAct[4],migAct[5]]
         'Ens movem en direcció el centre fins que hagi recorregut una certa distancia'
         vectorDir2≔[centre4[0]-migAct[0],centre4[1]-migAct[1],centre4[2]-migAct[2]]
         MoveL
           Direction: Base
             Until (distance)
         'Tornem a activar el moviment.'
         freedrive_mode()
         'Ara ja tornem a estar a dins l'area de moviment permesa, surtFlangeCon i surtFlangeCilin a False.'
         surtMigCon≔ False 
         surtMigCilin≔ False 
       Wait: 0.01
   Thread_1
     llistaTCPactual≔get_actual_tcp_pose()
     llistaFlangeAct≔get_actual_tool_flange_pose()
     llistaMigAct≔p[(llistaTCPactual[0]+llistaFlangeAct[0])/2,(llistaTCPactual[1]+llistaFlangeAct[1])/2,(llistaTCPactual[2]+llistaFlangeAct[2])/2,llistaTCPactual[3],llistaTCPactual[4],llistaTCPactual[5]]
     'Amb IFs pq el thread es un bucle pq te indicat loops forever'
     'Mirem el TCP'
     If (llistaTCPactual[2]-centre[2])≤alturaCon and (llistaTCPactual[2]-centre[2])>0
       r≔R-(alturaCon-(llistaTCPactual[2]-centre[2]))-rTCP
       'Calculem la distancia entre dos punts, el centre i el tcp al pla X-Y'
       distPunts≔sqrt(pow(llistaTCPactual[0]-centre[0],2)+pow(llistaTCPactual[1]-centre[1],2))
       'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'
       If distPunts≥r or distPunts≤-r
         surtTcpCon≔ True 
     ElseIf (llistaTCPactual[2]-centre[2])≤0 and (llistaTCPactual[2]-centre[2])≥-(alturaCilindre)
       r≔R-alturaCon-rTCP
       'Calculem la distancia entre dos punts, el centre i el tcp al pla X-Y'
       distPunts≔sqrt(pow(llistaTCPactual[0]-centre[0],2)+pow(llistaTCPactual[1]-centre[1],2))
       'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'
       If distPunts≥r or distPunts≤-r
         surtTcpCilindre≔ True 
     'Mirem el Flange'
     If (llistaFlangeAct[2]-centre[2])≤alturaCon and (llistaFlangeAct[2]-centre[2])>0
       rf≔R-(alturaCon-(llistaFlangeAct[2]-centre[2]))-rFlange
       'Calculem la distancia entre dos punts, el centre i el flange al pla X-Y'
       distPuntFlange≔sqrt(pow(llistaFlangeAct[0]-centre[0],2)+pow(llistaFlangeAct[1]-centre[1],2))
       'Si la distancia calculada supera el valor rf, entrem a la condicio perque estem intentant superar el limit.'
       If distPuntFlange≥rf or distPuntFlange≤-rf
         surtFlangeCon≔ True 
     ElseIf (llistaFlangeAct[2]-centre[2])≤0 and (llistaFlangeAct[2]-centre[2])≥-(alturaCilindre)
       rf≔R-alturaCon-rFlange
       'Calculem la distancia entre dos punts, el centre i el Flange al pla X-Y'
       distPuntFlange≔sqrt(pow(llistaFlangeAct[0]-centre[0],2)+pow(llistaFlangeAct[1]-centre[1],2))
       'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'
       If distPuntFlange≥rf or distPuntFlange≤-rf
         surtFlangeCilin≔ True 
     'Mirem el punt del mig'
     If (llistaMigAct[2]-centre[2])≤alturaCon and (llistaMigAct[2]-centre[2])>0
       rm≔R-(alturaCon-(llistaMigAct[2]-centre[2]))-rMig
       'Calculem la distancia entre dos punts, el centre i el mig al pla X-Y'
       distPuntMig≔sqrt(pow(llistaMigAct[0]-centre[0],2)+pow(llistaMigAct[1]-centre[1],2))
       'Si la distancia calculada supera el valor rf, entrem a la condicio perque estem intentant superar el limit.'
       If distPuntMig≥rm or distPuntMig≤-rm
         surtMigCon≔ True 
     ElseIf (llistaMigAct[2]-centre[2])≤0 and (llistaMigAct[2]-centre[2])≥-(alturaCilindre)
       rm≔R-alturaCon-rMig
       'Calculem la distancia entre dos punts, el centre i el mig al pla X-Y'
       distPuntMig≔sqrt(pow(llistaMigAct[0]-centre[0],2)+pow(llistaMigAct[1]-centre[1],2))
       'Si la distancia calculada supera el valor r, entrem a la condicio perque estem intentant superar el limit.'
       If distPuntMig≥rm or distPuntMig≤-rm
         surtMigCilin≔ True 
